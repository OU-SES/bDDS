/* Generated by ..\bin\opendds_idl version 3.14 (ACE version 6.2a_p18) running on input file Messenger.idl */
#include "MessengerTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Messenger */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Messenger::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.subject_id);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.utc);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.posstatus));
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.lat);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.lat_dir));
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.lon);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.lon_dir));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.speed);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.track);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.date);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.mag);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.mag_dir));
  size += gen_max_marshaled_size(ACE_OutputCDR::from_char(stru.mode));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.check);
}

bool operator<<(Serializer& strm, const Messenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.subject_id)
    && (strm << stru.utc)
    && (strm << ACE_OutputCDR::from_char(stru.posstatus))
    && (strm << stru.lat)
    && (strm << ACE_OutputCDR::from_char(stru.lat_dir))
    && (strm << stru.lon)
    && (strm << ACE_OutputCDR::from_char(stru.lon_dir))
    && (strm << stru.speed)
    && (strm << stru.track)
    && (strm << stru.date)
    && (strm << stru.mag)
    && (strm << ACE_OutputCDR::from_char(stru.mag_dir))
    && (strm << ACE_OutputCDR::from_char(stru.mode))
    && (strm << stru.check);
}

bool operator>>(Serializer& strm, Messenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.subject_id)
    && (strm >> stru.utc)
    && (strm >> ACE_InputCDR::to_char(stru.posstatus))
    && (strm >> stru.lat)
    && (strm >> ACE_InputCDR::to_char(stru.lat_dir))
    && (strm >> stru.lon)
    && (strm >> ACE_InputCDR::to_char(stru.lon_dir))
    && (strm >> stru.speed)
    && (strm >> stru.track)
    && (strm >> stru.date)
    && (strm >> stru.mag)
    && (strm >> ACE_InputCDR::to_char(stru.mag_dir))
    && (strm >> ACE_InputCDR::to_char(stru.mode))
    && (strm >> stru.check);
}

size_t gen_max_marshaled_size(const Messenger::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return align ? 68 : 49;
}

size_t gen_max_marshaled_size(KeyOnly<const Messenger::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Messenger::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.subject_id);
}

bool operator<<(Serializer& strm, KeyOnly<const Messenger::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.subject_id);
}

bool operator>>(Serializer& strm, KeyOnly<Messenger::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.subject_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Messenger::Message> : MetaStruct {
  typedef Messenger::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "subject_id")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const Messenger::Message& typed = *static_cast<const Messenger::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "utc") == 0) {
      return typed.utc;
    }
    if (std::strcmp(field, "posstatus") == 0) {
      return typed.posstatus;
    }
    if (std::strcmp(field, "lat") == 0) {
      return typed.lat;
    }
    if (std::strcmp(field, "lat_dir") == 0) {
      return typed.lat_dir;
    }
    if (std::strcmp(field, "lon") == 0) {
      return typed.lon;
    }
    if (std::strcmp(field, "lon_dir") == 0) {
      return typed.lon_dir;
    }
    if (std::strcmp(field, "speed") == 0) {
      return typed.speed;
    }
    if (std::strcmp(field, "track") == 0) {
      return typed.track;
    }
    if (std::strcmp(field, "date") == 0) {
      return typed.date;
    }
    if (std::strcmp(field, "mag") == 0) {
      return typed.mag;
    }
    if (std::strcmp(field, "mag_dir") == 0) {
      return typed.mag_dir;
    }
    if (std::strcmp(field, "mode") == 0) {
      return typed.mode;
    }
    if (std::strcmp(field, "check") == 0) {
      return typed.check;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "subject_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'subject_id' could not be skipped");
      }
    }
    if (std::strcmp(field, "utc") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'utc' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'utc' could not be skipped");
      }
    }
    if (std::strcmp(field, "posstatus") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'posstatus' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'posstatus' could not be skipped");
      }
    }
    if (std::strcmp(field, "lat") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'lat' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'lat' could not be skipped");
      }
    }
    if (std::strcmp(field, "lat_dir") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'lat_dir' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'lat_dir' could not be skipped");
      }
    }
    if (std::strcmp(field, "lon") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'lon' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'lon' could not be skipped");
      }
    }
    if (std::strcmp(field, "lon_dir") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'lon_dir' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'lon_dir' could not be skipped");
      }
    }
    if (std::strcmp(field, "speed") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'speed' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'speed' could not be skipped");
      }
    }
    if (std::strcmp(field, "track") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'track' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'track' could not be skipped");
      }
    }
    if (std::strcmp(field, "date") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'date' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'date' could not be skipped");
      }
    }
    if (std::strcmp(field, "mag") == 0) {
      ACE_CDR::Float val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'mag' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'mag' could not be skipped");
      }
    }
    if (std::strcmp(field, "mag_dir") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'mag_dir' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'mag_dir' could not be skipped");
      }
    }
    if (std::strcmp(field, "mode") == 0) {
      ACE_CDR::Char val;
      if (!(ser >> ACE_InputCDR::to_char(val))) {
        throw std::runtime_error("Field 'mode' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'mode' could not be skipped");
      }
    }
    if (std::strcmp(field, "check") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'check' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'check' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Messenger::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "utc") == 0) {
      return make_field_cmp(&T::utc, next);
    }
    if (std::strcmp(field, "posstatus") == 0) {
      return make_field_cmp(&T::posstatus, next);
    }
    if (std::strcmp(field, "lat") == 0) {
      return make_field_cmp(&T::lat, next);
    }
    if (std::strcmp(field, "lat_dir") == 0) {
      return make_field_cmp(&T::lat_dir, next);
    }
    if (std::strcmp(field, "lon") == 0) {
      return make_field_cmp(&T::lon, next);
    }
    if (std::strcmp(field, "lon_dir") == 0) {
      return make_field_cmp(&T::lon_dir, next);
    }
    if (std::strcmp(field, "speed") == 0) {
      return make_field_cmp(&T::speed, next);
    }
    if (std::strcmp(field, "track") == 0) {
      return make_field_cmp(&T::track, next);
    }
    if (std::strcmp(field, "date") == 0) {
      return make_field_cmp(&T::date, next);
    }
    if (std::strcmp(field, "mag") == 0) {
      return make_field_cmp(&T::mag, next);
    }
    if (std::strcmp(field, "mag_dir") == 0) {
      return make_field_cmp(&T::mag_dir, next);
    }
    if (std::strcmp(field, "mode") == 0) {
      return make_field_cmp(&T::mode, next);
    }
    if (std::strcmp(field, "check") == 0) {
      return make_field_cmp(&T::check, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"subject_id", "utc", "posstatus", "lat", "lat_dir", "lon", "lon_dir", "speed", "track", "date", "mag", "mag_dir", "mode", "check", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "utc") == 0) {
      return &static_cast<const T*>(stru)->utc;
    }
    if (std::strcmp(field, "posstatus") == 0) {
      return &static_cast<const T*>(stru)->posstatus;
    }
    if (std::strcmp(field, "lat") == 0) {
      return &static_cast<const T*>(stru)->lat;
    }
    if (std::strcmp(field, "lat_dir") == 0) {
      return &static_cast<const T*>(stru)->lat_dir;
    }
    if (std::strcmp(field, "lon") == 0) {
      return &static_cast<const T*>(stru)->lon;
    }
    if (std::strcmp(field, "lon_dir") == 0) {
      return &static_cast<const T*>(stru)->lon_dir;
    }
    if (std::strcmp(field, "speed") == 0) {
      return &static_cast<const T*>(stru)->speed;
    }
    if (std::strcmp(field, "track") == 0) {
      return &static_cast<const T*>(stru)->track;
    }
    if (std::strcmp(field, "date") == 0) {
      return &static_cast<const T*>(stru)->date;
    }
    if (std::strcmp(field, "mag") == 0) {
      return &static_cast<const T*>(stru)->mag;
    }
    if (std::strcmp(field, "mag_dir") == 0) {
      return &static_cast<const T*>(stru)->mag_dir;
    }
    if (std::strcmp(field, "mode") == 0) {
      return &static_cast<const T*>(stru)->mode;
    }
    if (std::strcmp(field, "check") == 0) {
      return &static_cast<const T*>(stru)->check;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "utc") == 0) {
      static_cast<T*>(lhs)->utc = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "posstatus") == 0) {
      static_cast<T*>(lhs)->posstatus = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "lat") == 0) {
      static_cast<T*>(lhs)->lat = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "lat_dir") == 0) {
      static_cast<T*>(lhs)->lat_dir = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "lon") == 0) {
      static_cast<T*>(lhs)->lon = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "lon_dir") == 0) {
      static_cast<T*>(lhs)->lon_dir = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "speed") == 0) {
      static_cast<T*>(lhs)->speed = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "track") == 0) {
      static_cast<T*>(lhs)->track = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "date") == 0) {
      static_cast<T*>(lhs)->date = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "mag") == 0) {
      static_cast<T*>(lhs)->mag = *static_cast<const CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "mag_dir") == 0) {
      static_cast<T*>(lhs)->mag_dir = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "mode") == 0) {
      static_cast<T*>(lhs)->mode = *static_cast<const CORBA::Char*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "check") == 0) {
      static_cast<T*>(lhs)->check = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "utc") == 0) {
      return static_cast<const T*>(lhs)->utc == static_cast<const T*>(rhs)->utc;
    }
    if (std::strcmp(field, "posstatus") == 0) {
      return static_cast<const T*>(lhs)->posstatus == static_cast<const T*>(rhs)->posstatus;
    }
    if (std::strcmp(field, "lat") == 0) {
      return static_cast<const T*>(lhs)->lat == static_cast<const T*>(rhs)->lat;
    }
    if (std::strcmp(field, "lat_dir") == 0) {
      return static_cast<const T*>(lhs)->lat_dir == static_cast<const T*>(rhs)->lat_dir;
    }
    if (std::strcmp(field, "lon") == 0) {
      return static_cast<const T*>(lhs)->lon == static_cast<const T*>(rhs)->lon;
    }
    if (std::strcmp(field, "lon_dir") == 0) {
      return static_cast<const T*>(lhs)->lon_dir == static_cast<const T*>(rhs)->lon_dir;
    }
    if (std::strcmp(field, "speed") == 0) {
      return static_cast<const T*>(lhs)->speed == static_cast<const T*>(rhs)->speed;
    }
    if (std::strcmp(field, "track") == 0) {
      return static_cast<const T*>(lhs)->track == static_cast<const T*>(rhs)->track;
    }
    if (std::strcmp(field, "date") == 0) {
      return static_cast<const T*>(lhs)->date == static_cast<const T*>(rhs)->date;
    }
    if (std::strcmp(field, "mag") == 0) {
      return static_cast<const T*>(lhs)->mag == static_cast<const T*>(rhs)->mag;
    }
    if (std::strcmp(field, "mag_dir") == 0) {
      return static_cast<const T*>(lhs)->mag_dir == static_cast<const T*>(rhs)->mag_dir;
    }
    if (std::strcmp(field, "mode") == 0) {
      return static_cast<const T*>(lhs)->mode == static_cast<const T*>(rhs)->mode;
    }
    if (std::strcmp(field, "check") == 0) {
      return static_cast<const T*>(lhs)->check == static_cast<const T*>(rhs)->check;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Messenger::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<Messenger::Message>()
{
  static MetaStructImpl<Messenger::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Messenger::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Messenger::Message>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger */
